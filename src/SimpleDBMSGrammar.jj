/**
 * @file    SimpleDBMSGramar.jj
 * @author  2014-18992 신동진
 * @brief   Basic SQL grammar parser
 */
options {
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)

import marodb.MaroDBMS;
import marodb.Field;
import marodb.type.DataType;
import marodb.type.IntType;
import marodb.type.CharType;
import marodb.type.DateType;
import marodb.type.Value;
import marodb.type.CharValue;
import marodb.type.DateValue;
import marodb.type.IntValue;
import marodb.type.NullValue;
import marodb.predicate.BooleanExp;
import marodb.predicate.BooleanTerm;
import marodb.predicate.BooleanTest;
import marodb.predicate.CompareOperand;
import marodb.predicate.CompareOperation;
import marodb.predicate.ComparisonPredicate;
import marodb.predicate.NullPredicate;
import marodb.predicate.Predicate;
import marodb.relation.Column;
import marodb.constraint.Constraint;
import marodb.constraint.PkConstraint;
import marodb.constraint.FkConstraint;
import marodb.util.Pair;
import marodb.exceptions.QueryError;
import marodb.exceptions.SchemaError;
import marodb.exceptions.InsertionError;
import marodb.exceptions.SelectionError;
import java.util.ArrayList;

public class SimpleDBMSParser {
  /// Type of SQL queries
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE =   2;
  public static final int PRINT_DESC =         3;
  public static final int PRINT_SELECT =       4;
  public static final int PRINT_INSERT =       5;
  public static final int PRINT_DELETE =       6;
  public static final int PRINT_SHOW_TABLES =  7;
  public static MaroDBMS dbms;

  public static void main(String args[]) throws ParseException {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2014-18992> ");
    dbms = new MaroDBMS();

    while (true) {
      try {
        parser.command();
      }
      catch (Throwable e) {
        System.out.println("Error : " + e.getMessage());
        throw e;
        // printMessage(PRINT_SYNTAX_ERROR);
        // SimpleDBMSParser.ReInit(System.in);
      }
    }
  }

  public static void printMessage(int q) {
    switch(q) {
      case PRINT_SYNTAX_ERROR:
      	System.out.println("Syntax error");
      	break;
      case PRINT_CREATE_TABLE:
      	break;
      case PRINT_DROP_TABLE:
      	break;
      case PRINT_DESC:
      	break;
      case PRINT_INSERT:
      	break;
      case PRINT_DELETE:
      	break;
      case PRINT_SELECT:
      	break;
      case PRINT_SHOW_TABLES:
      	break;
    }
    System.out.print("DB_2014-18992> ");
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

TOKEN : /* Keywords */ {
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < REFERENCES : "references" >
| < DESC : "desc" >
| < SELECT : "select" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < VALUES : "values" >
| < NULL : "null" >
| < TABLES : "tables">
| < TABLE : "table">
| < KEY : "key" >
| < INSERT : "insert" >
| < INTO : "into" >
| < DELETE : "delete" >
| < DROP : "drop">
| < SHOW : "show">
| < PRIMARY : "primary">
| < CREATE : "create">
| < FOREIGN : "foreign">
}

/// Tokens that are not reserved keywords
TOKEN : {
  < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < #UNDERSCORE : "_" >
| < #SIGN : "+" | "-" >
| < DATE_VALUE : <NNNN> "-" <NN> "-" <NN> >
| < #DIGIT : [ "0"-"9" ] >
| < #ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < #QUOTE : "'">
| < PERIOD : ".">
| < ASTERISK : "*">
| < #NNNN : (<DIGIT>){4} >
| < #NN : (<DIGIT>){2} >
| < LEQ : "<=">
| < LT : "<">
| < GEQ : ">=">
| < GT : ">">
| < EQ : "=">
| < NEQ : "!=">
| < CHARSTRING : <QUOTE> (<NON_QUOTE_SPECIAL_CHARACTER> | <DIGIT> | <ALPHABET> | " ")* <QUOTE> >
| < #NON_QUOTE_SPECIAL_CHARACTER : ["~", "`", "!", "@", "#", "$", "%", "^", "&",
"*", "(", ")", "-", "_", "+", "=", "|", "{", "[", "]", "}", "\\", ";", ":", ",",
"<", ".", ">", "?", "/"]>
| < LEGAL_IDENTIFIER : <ALPHABET> ( <ALPHABET> | <UNDERSCORE> )* >
| < INT_VALUE : ( <SIGN> )? ( <DIGIT> )+ >
}

void command() : {} {
  queryList()
| ( <EXIT> <SEMICOLON> { dbms.close(); System.exit(0); } )
}

void queryList() : { int q; } {
  (
    q = query()
    <SEMICOLON>
    { printMessage(q); }
  )+
}

/// @brief  Parse query and return its type
/// @param  int q Result query code
int query() : { int q; } {
  (
    createTableQuery() { q = PRINT_CREATE_TABLE; }
    | dropTable() { q = PRINT_DROP_TABLE; }
    | descQuery() { q = PRINT_DESC; }
    | selectQuery() { q = PRINT_SELECT; }
    | insertQuery() { q = PRINT_INSERT; }
    | deleteQuery() { q = PRINT_DELETE; }
    | showTableQuery() { q = PRINT_SHOW_TABLES; }
  )
  (
    { return q; }
  )
}

// "show tables" Query
void showTableQuery() : {} {
  <SHOW> <TABLES>
  { dbms.showTables(); }
}

/// @brief  Parse "create table <table_name> (<table element list>)" form
void createTableQuery() :
{
  String tablename;
  Pair<ArrayList<Field>, ArrayList<Constraint>> fields;
}
{
  <CREATE> <TABLE>
  tablename = tableName()
  fields = tableElementList() {
    try {
      dbms.addTable(tablename, fields);
    } catch (QueryError qe) {
      System.out.println("Create table has failed: " + qe.getMessage());
      return;
    } catch (SchemaError se) {
      System.out.println(se.getMessage());
      return;
    }
    System.out.println("'" + tablename + "' table is created");
  }
}

/// @brief  Parse "( <table element list> )" format
Pair<ArrayList<Field>, ArrayList<Constraint>> tableElementList() : {
  Pair<Field, Constraint> field;
  ArrayList<Field> fields = new ArrayList<Field>();
  ArrayList<Constraint> constraints = new ArrayList<Constraint>();
} {
  <LEFT_PAREN> field = tableElement() {
    if (field.first() != null) fields.add(field.first());
    else constraints.add(field.second());
  }
  ( <COMMA> field = tableElement() {
    if (field.first() != null) fields.add(field.first());
    else constraints.add(field.second());
  })* <RIGHT_PAREN>
  { return new Pair<ArrayList<Field>, ArrayList<Constraint>>(fields, constraints); }
}

/// @brief  Parse <table element> format
Pair<Field, Constraint> tableElement() : {
  Field field;
  Constraint constraint;
} {
  field = columnDefinition() { return new Pair<Field, Constraint>(field, null); }
| constraint = tableConstraintDefinition() { return new Pair<Field, Constraint>(null, constraint); }
}

/// @brief  Parse "<column_name> <data type> [not null]" format
Field columnDefinition() :
{
  String column;
  DataType type;
  boolean not_null = false;
} {
  column = columnName()
  type = dataType() ( notNull() { not_null = true; })?
  { return new Field(column, type, not_null); }
}

/// @brief  Parse "[not] null" format
void notNull() : {} {
  <NOT> <NULL>
}

/// @brief  Parse primary key or foreign key constraint formats
Constraint tableConstraintDefinition() : {
  Constraint constraint;
} {
  constraint = primaryKeyConstraint()
  { return constraint; }
| constraint = referentialConstraint()
  { return constraint; }
}

/// @brief  Parse "primary key(...)" format
Constraint primaryKeyConstraint() : {
  ArrayList<String> columns;
} {
  <PRIMARY> <KEY> columns = columnNameList()
  { return new PkConstraint(columns); }
}

/// @brief  Parse "foreign key(...)" format
FkConstraint referentialConstraint() : {
  ArrayList<String> columns;
  String table;
  ArrayList<String> referenceList;
} {
  <FOREIGN> <KEY> columns = columnNameList() <REFERENCES>
  table = tableName()
  referenceList = columnNameList()
  { return new FkConstraint(columns, table, referenceList); }
}

/// @brief  Parse "(<columnName>, ...)" format
ArrayList<String> columnNameList() : {
  ArrayList<String> result = new ArrayList<String>();
  String column;
} {
  <LEFT_PAREN> column = columnName() { result.add(column.toString().toLowerCase()); }
  ( <COMMA> column = columnName() { result.add(column.toString().toLowerCase()); } )* <RIGHT_PAREN>
  { return result; }
}

/// @brief  Parse integer / char(size) / date value format
DataType dataType() : { Token length; } {
  <INT> { return new IntType(); }
| ( <CHAR> <LEFT_PAREN> length = <INT_VALUE> <RIGHT_PAREN> ) { return new CharType(Integer.parseInt(length.image)); }
| <DATE> { return new DateType(); }
}

/// @brief  Parse table name
String tableName() : { Token tablename; } {
  tablename = <LEGAL_IDENTIFIER>
  { return tablename.toString().toLowerCase(); }
}

/// @brief  Parse column name
String columnName() : { Token column; } {
  column = <LEGAL_IDENTIFIER>
  { return column.toString().toLowerCase(); }
}

/// @brief  Parse "drop table <tableName>" format
void dropTable() : {
  String tablename;
} {
  <DROP> <TABLE> tablename = tableName()
  {
    try {
      dbms.dropTable(tablename);
    } catch ( QueryError qe ) {
      System.out.println("Drop table has failed: " + qe.getMessage());
      return;
    }
    System.out.println("'" + tablename + "' is dropped");
  }
}

/// @brief  Parse "desc <tableName>" format
void descQuery() : {
  String tablename;
} {
  <DESC> tablename = tableName()
  {
    try {
      dbms.descTable(tablename);
    } catch ( QueryError qe ) {
      System.out.println(qe.getMessage());
    }
  }
}

/// @brief  Parse "select ..." format
void selectQuery() : {
  Pair<ArrayList<Column>, ArrayList<String>> selectlist;
  Pair<ArrayList<Pair<String, String>>, BooleanExp> tableexp;
} {
  <SELECT> selectlist = selectList()
  tableexp = tableExp()
  {
    try {
      dbms.select(selectlist, tableexp.first(), tableexp.second());
    }
    catch ( SelectionError se ) {
      System.out.println("Selection has failed: " + se.getMessage());
    }
  }
}

/// @brief Parse select list
/// '*' or list of selected columns
Pair<ArrayList<Column>, ArrayList<String>> selectList() : {
  ArrayList<Column> tablelist = new ArrayList<Column>();
  ArrayList<String> aslist = new ArrayList<String>();
  Pair<Column, String> column;
} {
  <ASTERISK> { return null; } |
  column = selectedColumn()
  {
    tablelist.add(column.first());
    aslist.add(column.second());
  }
  ( <COMMA> column = selectedColumn()
  {
    tablelist.add(column.first());
    aslist.add(column.second());
  } )*
  { return new Pair<ArrayList<Column>, ArrayList<String>>(tablelist, aslist); }
}

/// @brief Parse selected column
/// tableName and columnName share same token <LEGAL_IDENTIFIER>, so looking 2 tokens ahead is required to
/// determine first token will be used as tableName (if 2nd token is ".") or columnName
Pair<Column, String> selectedColumn() : {
  Pair<String, String> select;
  String tablename = null;
  String columnname;
  String asColumn = null;
} {
  (LOOKAHEAD(2) tablename = tableName() <PERIOD> columnname = columnName() | columnname = columnName() )
  { select = new Pair<String, String>(tablename, columnname); }
  ( <AS> asColumn = columnName() ) ?
  { return new Pair<Column, String>(new Column(select), asColumn); }
}

/// @brief Parse "from ... [where ...]" format
Pair<ArrayList<Pair<String, String>>, BooleanExp> tableExp() : {
  ArrayList<Pair<String, String>> from;
  BooleanExp where = null;
} {
  from = fromClause() ( where = whereClause() ) ?
  { return new Pair<ArrayList<Pair<String, String>>, BooleanExp>(from, where); }
}

/// @brief Parse from clause
ArrayList<Pair<String, String>> fromClause() : {
  ArrayList<Pair<String, String>> result;
} {
  <FROM> result = tableReferenceList()
  { return result; }
}

/// @brief Parse table reference list
ArrayList<Pair<String, String>> tableReferenceList() : {
  ArrayList<Pair<String, String>> tablelist = new ArrayList<Pair<String, String>>();
  Pair<String, String> table;
} {
  table = referedTable() { tablelist.add(table); }
  (<COMMA> table = referedTable() { tablelist.add(table); } ) *
  { return tablelist; }
}

/// @brief Parse "<tableName> [as <tableName>]" format
Pair<String, String> referedTable() : {
  String tablename;
  String rename = null;
} {
  tablename = tableName() (<AS> rename = tableName()) ?
  { if (rename == null) rename = tablename;
    return new Pair<String, String>(tablename, rename);
  }
}

/// @brief Parse "where <predicate>" format
BooleanExp whereClause() : {
  BooleanExp result;
} {
  <WHERE> result = booleanValueExp()
  { return result; }
}

/// Collecting order of "or" "and" "not" affects operator precedence
/// "not" should be collected first, then "and" and finally "or"

/// @brief Collect "or" connected terms
BooleanExp booleanValueExp() : {
  BooleanExp result;
  BooleanTerm bterm;
} {
  bterm = booleanTerm() { result = new BooleanExp(bterm); }
  ( <OR> result = booleanValueExp() { result.addFront(bterm); } ) ?
  { return result; }
}

/// @brief Collect "and" connected terms
BooleanTerm booleanTerm() : {
  BooleanTerm result;
  BooleanTest btest;
} {
  btest = booleanFactor() { result = new BooleanTerm(btest); }
  ( <AND> result = booleanTerm() { result.addFront(btest); } ) ?
  { return result; }
}

/// @brief Collect "not" connected terms
BooleanTest booleanFactor() : {
  boolean not = false;
  BooleanTest btest;
} {
  (<NOT> { not = true; } ) ? btest = booleanTest()
  { btest.setNot(not); return btest; }
}

/// @brief  Parse expression which returns boolean value
BooleanTest booleanTest() : {
  Predicate p;
  BooleanExp bexp;
} {
  p = predicate() { return new BooleanTest(p); } |
  bexp = parenthesizedBooleanExp() { return new BooleanTest(bexp); }
}

/// @brief  Parse "( <boolean expression> )" format
BooleanExp parenthesizedBooleanExp() : {
  BooleanExp bexp;
} {
  <LEFT_PAREN> bexp = booleanValueExp() <RIGHT_PAREN>
  { return bexp; }
}

/// @brief  Parse predicate statement
/// Lookahead of 4 tokens is required because longest command prefix for comparison predicate and null predicate
/// is <tableName> "." <columnName>. (4th token will be "is" or comparison operator, then we can determine)
Predicate predicate() : {
  ComparisonPredicate cp;
  NullPredicate np;
} {
  LOOKAHEAD(4) cp = comparisonPredicate() { return cp; } |
  np = nullPredicate() { return np; }
}

/// @brief  Parse comparison predicate
ComparisonPredicate comparisonPredicate() : {
  CompareOperand a, b;
  CompareOperation op;
} {
  a = compOperand() op = compOp() b = compOperand()
  { return new ComparisonPredicate(a, b, op); }
}

/// @brief Parse comparison operand
/// tableName and columnName share same token <LEGAL_IDENTIFIER>, so looking 2 tokens ahead is required to
/// determine first token will be used as tableName (if 2nd token is ".") or columnName
CompareOperand compOperand() : {
  Value v;
  String table = null;
  String column;
} {
  v = comparableValue() { return new CompareOperand(v); }
| (LOOKAHEAD(2) table = tableName() <PERIOD> column = columnName() | column = columnName() )
  { return new CompareOperand(new Column(table, column)); }
}

/// @brief Parse comparison operators
CompareOperation compOp() : {
  Token t;
} {
  t = <LEQ> { return new CompareOperation(t.toString()); } |
  t = <GEQ> { return new CompareOperation(t.toString()); } |
  t = <LT> { return new CompareOperation(t.toString()); } |
  t = <GT> { return new CompareOperation(t.toString()); } |
  t = <EQ> { return new CompareOperation(t.toString()); } |
  t = <NEQ> { return new CompareOperation(t.toString()); }
}

/// @brief Parse comparable values
Value comparableValue() : {
  IntValue intv;
  CharValue charv;
  DateValue datev;
  Token t;
} {
  t = <INT_VALUE> { return new IntValue(Integer.parseInt(t.image)); } |
  t = <CHARSTRING> { return new CharValue(t.toString().substring(1, t.toString().length() - 1)); } |
  t = <DATE_VALUE> { return new DateValue(t.toString()); }
}

/// @brief Parse null predicate
/// tableName and columnName share same token <LEGAL_IDENTIFIER>, so looking 2 tokens ahead is required to
/// determine first token will be used as tableName (if 2nd token is ".") or columnName
NullPredicate nullPredicate() : {
  Pair<String, String> column = new Pair<String, String>(null, null);
  String tablename, columnname;
  boolean nullOp;
} {
  (LOOKAHEAD(2) tablename = tableName() <PERIOD> columnname = columnName()
  { column.setFirst(tablename);
    column.setSecond(columnname);
  }|
  columnname = columnName() {
    column.setSecond(columnname);
  } )
  nullOp = nullOperation()
  { return new NullPredicate(new Column(column), nullOp); }
}

/// @brief Parse null operation
boolean nullOperation() : {
  boolean result = true;
} {
  <IS> (<NOT> { result = false; } ) ? <NULL>
  { return result; }
}

/// @brief Parse "delete from <tableName> [where ...]" format
void deleteQuery() : {
  String tablename;
  BooleanExp bexp = null;
} {
  <DELETE> <FROM> tablename = tableName() ( bexp = whereClause() ) ?
  {
    try {
      dbms.delete(tablename, bexp);
    }
    catch (QueryError qe) {
      System.out.println(qe.getMessage());
    }
  }
}

/// @brief Parse "insert into ..." format
void insertQuery() : {
  String tablename;
  ArrayList<String> columnnamelist = null;
  ArrayList<Value> valuelist = new ArrayList<Value>();
  Value v;
} {
  <INSERT> <INTO>
  tablename = tableName()
  ( columnnamelist = columnNameList() ) ?
  <VALUES> <LEFT_PAREN> v = value() { valuelist.add(v); }
  (<COMMA> v = value() { valuelist.add(v); } )* <RIGHT_PAREN>
  {
    try {
      dbms.insert(tablename, columnnamelist, valuelist);
    }
    catch ( InsertionError ie ) {
      System.out.println("Insertion has failed: " + ie.getMessage());
      return;
    }
    System.out.println("The row is inserted");
  }
}

/// @brief Parse null or comparable value
Value value() : {
  Value v;
} {
  <NULL> { return new NullValue(); }|
  v = comparableValue() { return v; }
}